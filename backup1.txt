import pygame
import random
import time
import math
from queue import PriorityQueue
import requests
import datetime

# Başlangıç zamanını kaydedin

# İşleminizi gerçekleştirin
# Buraya işleminizi yazın





url = "http://bilgisayar.kocaeli.edu.tr/prolab2/url2.txt" # Veri çekmek istediğiniz URL
response = requests.get(url) # URL'den veriyi alın

if response.status_code == 200: # HTTP isteği başarılı olduysa
    veri = response.content # URL'den alınan veri
    print(veri) # Veriyi ekrana yazdırın
else:
    print("Bir hata oluştu:", response.status_code)

WIDTH = 600
WIN = pygame.display.set_mode((WIDTH, WIDTH))
pygame.display.set_caption("first attempt")

ROBOT = (0, 35, 223)
TARGET = (255, 79, 20)
WALL = (25, 25, 25)
LAKE_SAFE = (0, 211, 248),
HOUSE_SAFE = (255, 209, 90)
TREE_SAFE = (108, 201, 113)
LAKE_UNSAFE = (4, 5, 87)
HOUSE_UNSAFE = (255, 132, 0)
TREE_UNSAFE = (33, 46, 17)
PATH = (206, 164, 119)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 255, 0)
YELLOW = (255, 255, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)
GREY = (128, 128, 128)
TURQUOISE = (64, 224, 208)


with open("labby.txt", "wb") as f:
    f.write(veri)
print("Veri dosyaya kaydedildi.")

with open("labby.txt") as f:
    a = f.readlines()


class Spot:
    def __init__(self, row, col, width, total_rows):
        self.row = row
        self.col = col
        self.x = row * width
        self.y = col * width
        self.color = WHITE
        self.neighbors = []
        self.width = width
        self.total_rows = total_rows

    
    def get_pos(self):
        return self.row, self.col

    def is_closed(self):
        return self.color == RED

    def is_open(self):
        return self.color == GREEN

    def is_barrier(self):
        return self.color == BLACK

    def is_start(self):
        return self.color == ORANGE

    def is_end(self):
        return self.color == TURQUOISE

    def reset(self):
        self.color = WHITE

    def make_start(self):
        self.color = ORANGE

    def make_closed(self):
        time.sleep(0.05)
        self.color = RED

    def make_open(self):
        self.color = GREEN

    def make_barrier(self):
        self.color = BLACK
    
    def make_tree(self):
        self.color = TREE_SAFE
    def make_lake(self):
        self.color = LAKE_SAFE
    def make_house(self):
        self.color = HOUSE_SAFE
    def make_robot(self):
        self.color = ROBOT
    def make_target(self):
        self.color = TARGET
    def make_path(self):
        self.color = PATH
    def make_tree(self):
        self.color = TREE_SAFE
    def make_wall(self):
        self.color = WALL

    
    
    
    
        







    def make_end(self):
        self.color = TURQUOISE

    def make_path(self):
        time.sleep(0.1)
        self.color = PURPLE

    def draw(self, win):
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.width))

    def update_neighbors(self, grid):
        self.neighbors = []
        # DOWN
        if self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_barrier() or self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_tree() or self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_house() or self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_lake() :
            self.neighbors.append(grid[self.row + 1][self.col])

        if self.row > 0 and not grid[self.row - 1][self.col].is_barrier() or self.row > 0 and not grid[self.row - 1][self.col].is_tree() or self.row > 0 and not grid[self.row - 1][self.col].is_house() or self.row > 0 and not grid[self.row - 1][self.col].is_lake():  # UP
            self.neighbors.append(grid[self.row - 1][self.col])

        # RIGHT
        if self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_barrier() or self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_tree() or self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_house() or self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_lake():
            self.neighbors.append(grid[self.row][self.col + 1])

        if self.col > 0 and not grid[self.row][self.col - 1].is_barrier() or self.col > 0 and not grid[self.row][self.col - 1].is_lake() or self.col > 0 and not grid[self.row][self.col - 1].is_house() or self.col > 0 and not grid[self.row][self.col - 1].is_tree():  # LEFT
            self.neighbors.append(grid[self.row][self.col - 1])

    def __lt__(self, other):
        return False


def h(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return abs(x1 - x2) + abs(y1 - y2)


def reconstruct_path(came_from, current, draw):
    while current in came_from:
        current = came_from[current]
        current.make_path()
        draw()


def algorithm(draw, grid, start, end, way_counter):
    count = 0
    open_set = PriorityQueue()
    open_set.put((0, count, start))
    came_from = {}
    g_score = {spot: float("inf") for row in grid for spot in row}
    g_score[start] = 0
    f_score = {spot: float("inf") for row in grid for spot in row}
    f_score[start] = h(start.get_pos(), end.get_pos())

    open_set_hash = {start}

    while not open_set.empty():
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        current = open_set.get()[2]
        open_set_hash.remove(current)

        if current == end:
            reconstruct_path(came_from, end, draw)
            end.make_end()
            return True

        for neighbor in current.neighbors:
            temp_g_score = g_score[current] + 1

            if temp_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = temp_g_score
                f_score[neighbor] = temp_g_score + h(neighbor.get_pos(), end.get_pos())
                if neighbor not in open_set_hash:
                    count += 1
                    open_set.put((f_score[neighbor], count, neighbor))
                    open_set_hash.add(neighbor)
                    neighbor.make_open()

        way_counter += 1
        draw()
        
        if current != start:
            current.make_closed()

    return False


def make_grid(rows, width):
    grid = []
    gap = width // rows
    for i in range(rows):
        grid.append([])
        for j in range(rows):
            spot = Spot(i, j, gap, rows)
            grid[i].append(spot)

    return grid


def draw_grid(win, rows, width):
    gap = width // rows
    for i in range(rows):
        pygame.draw.line(win, GREY, (0, i * gap), (width, i * gap))
        for j in range(rows):
            pygame.draw.line(win, GREY, (j * gap, 0), (j * gap, width))


def draw(win, grid, rows, width):
    win.fill(WHITE)

    for row in grid:
        for spot in row:
            spot.draw(win)

    draw_grid(win, rows, width)
    pygame.display.update()


def get_clicked_pos(pos, rows, width):
    gap = width // rows
    y, x = pos

    row = y // gap
    col = x // gap

    return row, col
lenght = len(a)
spawn_point = [[1,1],[lenght,1],[1,lenght],[lenght,1]]
start_point = random.choice(spawn_point)
spawn_point.remove(start_point)
end_point = random.choice(spawn_point)
while (((abs(start_point[0] - end_point[0])**2 + abs(start_point[1] - end_point[1])**2) ** 0.5) < len(a) + 1):
    end_point = random.choice(spawn_point)
    




def main(win, width):
    
    ROWS = len(a) + 2

    print("test")
    print(lenght)
    grid = make_grid(ROWS, width)

    start = None
    end = None
    row, col = 0, 0
    spot = grid[row][col]
    
    run = True
    while run:
        draw(win, grid, ROWS, width)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and start and end:

                    for row in grid:
                        for spot in row:
                            spot.update_neighbors(grid)
                            
                    way_counter = 0
                    baslangic_zamani = datetime.datetime.now()
                    algorithm(lambda: draw(win, grid, ROWS, width), grid, start, end, way_counter)
                    bitis_zamani = datetime.datetime.now()
                    gecen_sure = bitis_zamani - baslangic_zamani
                    gecen_dakika = gecen_sure.seconds // 60
                    gecen_saniye = gecen_sure.seconds % 60
                    gecen_mikrosaniye = gecen_sure.microseconds

                    print("Geçen süre: {} dakika, {} saniye, {} mikrosaniye".format(gecen_dakika, gecen_saniye, gecen_mikrosaniye))
                    print("gidilen adım sayısı")
                    print(way_counter)

                if event.key == pygame.K_c:
                    start = None
                    end = None
                    grid = make_grid(ROWS, width)
        for i in a:
            row = 1
            col += 1
            if col <= lenght:
                for j in i:
                    if j == "0":
                        row += 1
                        spot = grid[row][col]
                    elif j == "1":
                        spot.make_tree()
                        row += 1
                        spot = grid[row][col]
                    elif j == "2":
                        spot.make_house()
                        row += 1
                        spot = grid[row][col]
                    elif j == "3":
                        spot.make_lake()
                        row += 1
                        spot = grid[row][col]
                    elif row == lenght:
                        break
            elif col == lenght:
                break
        row = 0
        col = 0
        while True:
            i = 0
            spot = grid[row][col]
            spot.make_wall()
            row += 1
            if row == lenght + 1:
                break
        row = 0
        col = 0
        while True:
            i = 0
            spot = grid[row][col]
            spot.make_wall()
            col += 1
            if col == lenght + 1:
                break
        row = lenght + 1
        col = 0
        while True:
            i = 0
            spot = grid[row][col]
            spot.make_wall()
            col += 1
            if col == lenght + 1:
                break
        row = 0
        col = lenght + 1
        while True:
            i = 0
            spot = grid[row][col]
            spot.make_wall()
            row += 1
            if row == lenght + 1:
                break
            
        spot = grid[lenght + 1][lenght + 1]
        spot.make_wall()

        row, col = start_point
        spot = grid[row][col]
        start = spot
        start.make_robot()

        
        
        row, col = end_point
        spot = grid[row][col]
        end = spot
        end.make_target()
        


        
    pygame.quit()
    

main(WIN, WIDTH)